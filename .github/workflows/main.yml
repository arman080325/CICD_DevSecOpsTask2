name: DevSecOps CI Pipeline ðŸš€

on:
  push:
    branches: [ main ]
    # paths-ignore:
    #   - 'k8s/**'

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: my-vite-app
  EKS_CLUSTER_NAME: vite-app-cluster

jobs:
  # ... (security-scans job remains the same)
  security-scans:
    name: Security Scanning 
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up tfsec config
        run: |
          mkdir -p .tfsec
          echo "---" > .tfsec/config.yml
          echo "exclude:" >> .tfsec/config.yml
          echo "  - aws-eks-no-public-cluster-access" >> .tfsec/config.yml
          echo "  - aws-eks-no-public-cluster-access-to-cidr" >> .tfsec/config.yml
          echo "  - aws-ec2-no-public-egress-sgr" >> .tfsec/config.yml
      - name: Scan Terraform code with tfsec
        run: |
          TFSEC_VERSION=v1.28.14
          wget https://github.com/aquasecurity/tfsec/releases/download/${TFSEC_VERSION}/tfsec-linux-amd64 -O tfsec
          chmod +x tfsec
          sudo mv tfsec /usr/local/bin/tfsec
          tfsec --soft-fail ./infra
      - name: Build Docker image 
        run: docker build -t temp-image-for-scan .
      - name: Scan Docker image with Trivy
        uses: aquasecurity/trivy-action@0.20.0
        with:
          image-ref: 'temp-image-for-scan'
          format: 'table'
          severity: 'HIGH,CRITICAL'

  build-and-push:
    name: Build & Push to ECR 
    runs-on: ubuntu-latest
    needs: security-scans
    permissions:
      contents: read
    outputs:
      image_tag: ${{ steps.build-image.outputs.image-tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image-tag=$IMAGE_TAG" >> $GITHUB_OUTPUT
          echo "The image tag being set is: $IMAGE_TAG"

  update-manifest:
    name: Update K8s Manifest 
    runs-on: ubuntu-latest
    needs: build-and-push
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Print received image tag
        run: |
          echo "Received image tag from previous job: ${{ needs.build-and-push.outputs.image_tag }}"
      - name: Update deployment with new image tag
        run: |
          sed -i "s|image: .*/${{ env.ECR_REPOSITORY }}:.*|image: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY }}:${{ needs.build-and-push.outputs.image_tag }}|" k8s/deployment.yaml
      - name: Commit and push changes
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git add k8s/deployment.yaml
          git commit -m "Updated image tag to ${{ needs.build-and-push.outputs.image_tag }}"
          git push